---
title: UI
marimo-version: 0.13.2
lang: ko
header: |-
  # Copyright 2024 Marimo. All rights reserved.
filters:
- marimo-team/marimo
---

# UI 요소

marimo의 가장 강력한 기능 중 하나는 대화형 사용자 인터페이스(UI) 요소에 대한 최고 수준의 지원입니다. UI 요소와 상호 작용하면 해당 요소를 참조하는 셀이 자동으로 실행됩니다.
<!---->
## marimo.ui

```python {.marimo}
slider = mo.ui.slider(start=1, stop=10, step=1)
slider

mo.md(
    f"""
    `marimo.ui` 모듈에는 미리 빌드된 요소 라이브러리가 있습니다.

    예를 들어, 다음은 `슬라이더`입니다. {slider}
    """
)
```

```python {.marimo}
mo.md(f"그리고 다음은 해당 값입니다. **{slider.value}**.")
```

### 상호 작용이 셀을 실행하는 방식

UI 요소와 상호 작용할 때마다 해당 값이 Python으로 다시 전송됩니다. 이 경우 UI 요소에 바인딩된 전역 변수를 참조하지만 정의하지 않는 모든 셀이 실행됩니다.

이 간단한 규칙을 통해 UI 요소를 사용하여 프로그램 실행을 구동하고 자신과 다른 사람을 위한 대화형 노트북과 도구를 만들 수 있습니다.

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: UI 요소를 전역 변수에 할당합니다.": (
            """
            표시된 UI 요소와 상호 작용하면 UI 요소가 전역 변수에 할당된 경우에만 반응형 실행이 트리거됩니다.
            """
        ),
        "팁: 요소 값에 액세스합니다.": (
            """
            모든 UI 요소에는 Python에서 액세스할 수 있는 값 속성이 있습니다.
            """
        ),
        "팁: 마크다운에 UI 요소를 포함합니다.": mo.md(
            f"""
            f-문자열을 사용하여 마크다운에 UI 요소를 포함할 수 있습니다.

            예를 들어, 여기에 슬라이더를 렌더링할 수 있습니다. {slider}
            """
        ),
    }
)
```

### 간단한 요소
<!---->
marimo에는 [간단한 UI 요소의 대규모 라이브러리](https://docs.marimo.io/api/inputs/index.html)가 있습니다. 다음은 몇 가지 예입니다.

```python {.marimo hide_code="true"}
mo.md(
    """
    GitHub의 [예제 폴더](https://github.com/marimo-team/marimo/tree/main/examples/ui)에서 모든 UI 요소를 보여주는 간단한 노트북을 참조하세요. 자세한 내용은 [API 문서](https://docs.marimo.io/api/inputs/)를 참조하세요.
    """
).callout()
```

```python {.marimo}
number = mo.ui.number(start=1, stop=10, step=1)
number
```

```python {.marimo}
number.value
```

```python {.marimo}
checkbox = mo.ui.checkbox(label="확인란")
checkbox
```

```python {.marimo}
checkbox.value
```

```python {.marimo}
text = mo.ui.text(placeholder="텍스트를 입력하세요...")
text
```

```python {.marimo}
text.value
```

```python {.marimo}
text_area = mo.ui.text_area(placeholder="텍스트를 입력하세요...")
text_area
```

```python {.marimo}
text_area.value
```

```python {.marimo}
dropdown = mo.ui.dropdown(["a", "b", "c"])
dropdown
```

```python {.marimo}
dropdown.value
```

```python {.marimo}
run_button = mo.ui.run_button(label="클릭하세요")
run_button
```

```python {.marimo}
"실행 버튼을 클릭했습니다!" if run_button.value else "실행 버튼을 클릭하세요!"
```

```python {.marimo}
file_upload = mo.ui.file(kind="area")
file_upload
```

```python {.marimo}
file_upload.value
```

```python {.marimo}
mo.md(f"더 많은 예제를 보려면 이 드롭다운을 사용하세요. {basic_ui_elements}")
```

```python {.marimo}
selected_element = construct_element(basic_ui_elements.value)
show_element(selected_element)
```

```python {.marimo}
value(selected_element)
```

```python {.marimo}
documentation(basic_ui_elements.value)
```

### 복합 요소

    복합 요소는 고급 요소로, 다른 UI 요소로 UI 요소를 만들 수 있습니다.

    이러한 강력한 요소를 사용하여 관련 요소를 논리적으로 그룹화하거나 동적 UI 요소 집합을 만들거나 프로그램의 전역 변수 수를 줄입니다.
<!---->
이 첫 번째 예는 `mo.ui.array`를 사용하여 UI 요소 배열을 만드는 방법을 보여줍니다. 배열의 요소와 상호 작용하면 배열을 참조하는 모든 셀이 반응적으로 실행됩니다. 대신 일반 Python 목록을 사용하면 목록을 참조하는 셀이 실행되지 _않습니다_.

```python {.marimo}
array = mo.ui.array(
    [mo.ui.text(), mo.ui.slider(start=1, stop=10), mo.ui.date()]
)
array
```

```python {.marimo}
array.value
```

marimo에는 `mo.ui.array`와 유사한 `mo.ui.dictionary`도 함께 제공됩니다.

```python {.marimo}
dictionary = mo.ui.dictionary(
    {
        "text": mo.ui.text(),
        "slider": mo.ui.slider(start=1, stop=10),
        "date": mo.ui.date(),
    }
)
dictionary
```

```python {.marimo}
dictionary.value
```

```python {.marimo hide_code="true"}
mo.md(
    f"추가 복합 요소를 보려면 이 드롭다운을 사용하세요. {composite_elements}"
)
```

```python {.marimo}
composite_element = construct_element(composite_elements.value)
show_element(composite_element)
```

```python {.marimo}
value(composite_element)
```

```python {.marimo}
documentation(composite_elements.value)
```

### 사용자 지정 요소 빌드

marimo는 anywidget을 통해 타사 UI 요소를 지원합니다. 이를 통해 자신만의 대화형 UI 요소를 빌드하거나 커뮤니티의 다른 사람이 빌드한 위젯을 사용할 수 있습니다. 자세한 내용은 [문서](https://docs.marimo.io/guides/integrating_with_marimo/custom_ui_plugins.html)를 참조하세요.
<!---->
## 부록
나머지 셀은 도우미 데이터 구조 및 함수입니다. 이 튜토리얼의 특정 부분이 어떻게 구현되었는지 궁금하다면 해당 코드를 볼 수 있습니다.

```python {.marimo}
composite_elements = mo.ui.dropdown(
    options=dict(
        sorted(
            {
                "array": mo.ui.array,
                "batch": mo.ui.batch,
                "dictionary": mo.ui.dictionary,
                "form": mo.ui.form,
            }.items()
        )
    ),
    allow_select_none=True
)
```

```python {.marimo}
basic_ui_elements = mo.ui.dropdown(
    options=dict(
        sorted(
            {
                "button": mo.ui.button,
                "checkbox": mo.ui.checkbox,
                "date": mo.ui.date,
                "dropdown": mo.ui.dropdown,
                "file": mo.ui.file,
                "multiselect": mo.ui.multiselect,
                "number": mo.ui.number,
                "radio": mo.ui.radio,
                "range_slider": mo.ui.range_slider,
                "slider": mo.ui.slider,
                "switch": mo.ui.switch,
                "tabs": mo.ui.tabs,
                "table": mo.ui.table,
                "text": mo.ui.text,
                "text_area": mo.ui.text_area,
            }.items()
        )
    ),
)
```

```python {.marimo}
def construct_element(value):
    if value == mo.ui.array:
        return mo.ui.array(
            [mo.ui.text(), mo.ui.slider(1, 10), mo.ui.date()]
        )
    elif value == mo.ui.batch:
        return mo.md(
            """
            - 이름: {name}
            - 날짜: {date}
            """
        ).batch(name=mo.ui.text(), date=mo.ui.date())
    elif value == mo.ui.button:
        return mo.ui.button(
            value=0, label="클릭하세요", on_click=lambda value: value + 1
        )
    elif value == mo.ui.checkbox:
        return mo.ui.checkbox(label="선택하세요")
    elif value == mo.ui.date:
        return mo.ui.date()
    elif value == mo.ui.dictionary:
        return mo.ui.dictionary(
            {
                "slider": mo.ui.slider(1, 10),
                "text": mo.ui.text("무언가를 입력하세요!"),
                "array": mo.ui.array(
                    [
                        mo.ui.button(value=0, on_click=lambda v: v + 1)
                        for _ in range(3)
                    ],
                    label="버튼",
                ),
            }
        )
    elif value == mo.ui.dropdown:
        return mo.ui.dropdown(["a", "b", "c"])
    elif value == mo.ui.file:
        return [mo.ui.file(kind="button"), mo.ui.file(kind="area")]
    elif value == mo.ui.form:
        return mo.ui.text_area(placeholder="...").form()
    elif value == mo.ui.multiselect:
        return mo.ui.multiselect(["a", "b", "c"])
    elif value == mo.ui.number:
        return mo.ui.number(start=1, stop=10, step=0.5)
    elif value == mo.ui.radio:
        return mo.ui.radio(["a", "b", "c"], value="a")
    elif value == mo.ui.range_slider:
        return mo.ui.range_slider(start=1, stop=10, step=0.5)
    elif value == mo.ui.slider:
        return mo.ui.slider(start=1, stop=10, step=0.5)
    elif value == mo.ui.switch:
        return mo.ui.switch()
    elif value == mo.ui.tabs:
        return mo.ui.tabs(
            {
                "직원 #1": {
                    "first_name": "Michael",
                    "last_name": "Scott",
                },
                "직원 #2": {
                    "first_name": "Dwight",
                    "last_name": "Schrute",
                },
            }
        )
    elif value == mo.ui.table:
        return mo.ui.table(
            data=[
                {"first_name": "Michael", "last_name": "Scott"},
                {"first_name": "Dwight", "last_name": "Schrute"},
            ],
            label="직원",
        )
    elif value == mo.ui.text:
        return mo.ui.text()
    elif value == mo.ui.text_area:
        return mo.ui.text_area()
    return None
```

```python {.marimo}
def show_element(element):
    if element is not None:
        return mo.hstack([element], justify="center")
```

```python {.marimo}
def value(element):
    if element is not None:
        v = (
            element.value
            if not isinstance(element, mo.ui.file)
            else element.name()
        )
        return mo.md(
            f"""
            요소의 현재 값은 {mo.as_html(element.value)}입니다.
            """
        )
```

```python {.marimo}
def documentation(element):
    if element is not None:
        return mo.accordion(
            {
                f"`mo.ui.{element.__name__}`에 대한 문서": mo.doc(
                    element
                )
            }
        )
```

```python {.marimo}
import marimo as mo
```