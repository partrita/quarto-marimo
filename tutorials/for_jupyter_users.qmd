---
title: Jupyter 사용자를 위한 marimo
marimo-version: 0.13.2
lang: ko
header: |-
  # Copyright 2024 Marimo. All rights reserved.
filters:
- marimo-team/marimo
---

# Jupyter 사용자를 위한 marimo

이 노트북은 Jupyter와 marimo의 중요한 차이점을 설명합니다. Jupyter에 익숙하고 marimo를 처음 사용하는 경우 계속 읽어보세요!
<!---->
## 반응형 실행

marimo와 Jupyter의 가장 큰 차이점은 *반응형 실행*입니다.

다음 셀에서 x 값을 업데이트한 다음 실행해 보세요.

```python {.marimo}
x = 0; x
```

```python {.marimo}
y = x + 1; y
```

marimo는 `x`의 변경에 '반응'하여 자동으로 `y`를 다시 계산합니다!

**설명.** marimo는 셀의 코드를 읽고 각 셀이 선언하고 참조하는 변수를 기반으로 셀 간의 종속성을 이해합니다. 하나의 셀을 실행하면 marimo는 스프레드시트와 유사하게 해당 셀에 종속된 다른 모든 셀을 자동으로 실행합니다.

반대로 Jupyter는 각 셀을 수동으로 실행해야 합니다.
<!---->
### 왜 그럴까요?

반응형 실행은 셀을 수동으로 다시 실행하는 지루한 작업에서 벗어나게 해줍니다.

또한 코드와 출력이 동기화되도록 보장합니다.

- 셀을 다시 실행하는 것을 잊었는지 걱정할 필요가 없습니다.
- 셀을 삭제하면 해당 변수가 프로그램 메모리에서 자동으로 제거됩니다. 영향을 받는 셀은 자동으로 무효화됩니다.

이로 인해 marimo 노트북은 일반 Python 스크립트만큼 재현 가능합니다.
<!---->
## 내장된 대화형 요소

marimo에는 Python과 자동으로 동기화되는 [UI 요소의 대규모 라이브러리](https://docs.marimo.io/guides/interactivity.html)가 함께 제공됩니다.

```python {.marimo}
import marimo as mo
```

```python {.marimo}
slider = mo.ui.slider(start=1, stop=10, label="$x$")
slider
```

```python {.marimo}
slider.value
```

**설명.** marimo는 노트북이자 라이브러리입니다. `marimo as mo`를 가져오고 `mo.ui`를 사용하여 강력한 UI 요소에 액세스합니다.

변수에 할당된 UI 요소는 marimo의 반응형 실행 모델에 자동으로 연결됩니다. 상호 작용은 해당 요소를 참조하는 셀의 실행을 자동으로 트리거합니다.

반대로 Jupyter의 반응성 부족으로 인해 IPyWidgets를 사용하기 어렵습니다.
<!---->
## 앱으로 공유 가능

marimo 노트북은 읽기 전용 웹 앱으로 공유할 수 있습니다. 명령줄에서 다음을 사용하여 제공하기만 하면 됩니다.

```marimo run your_notebook.py```

모든 marimo 노트북을 앱으로 공유할 필요는 없지만 원하는 경우 marimo를 사용하면 원활하게 공유할 수 있습니다. 이러한 방식으로 marimo는 Jupyter와 Streamlit 모두를 대체하는 역할을 합니다.
<!---->
## 셀 순서

marimo에서는 셀을 어떤 순서로든 정렬할 수 있습니다. marimo는 변수 선언 및 참조를 기반으로 셀을 실행하는 유일한 올바른 방법을 알아냅니다(["위상 정렬된"](https://en.wikipedia.org/wiki/Topological_sorting#:~:text=In%20computer%20science%2C%20a%20topological,before%20v%20in%20the%20ordering.) 순서).

```python {.marimo}
z.value
```

```python {.marimo}
z = mo.ui.slider(1, 10, label="$z$"); z
```

이렇게 하면 가장 합리적인 방식으로 셀을 정렬할 수 있습니다. 예를 들어 도우미 함수와 가져오기를 부록처럼 노트북 하단에 배치합니다.

반대로 Jupyter 노트북은 암묵적으로 위에서 아래로 실행 순서를 가정합니다.
<!---->
## 변수 재할당

marimo는 변수 재할당을 허용하지 않습니다. 다음은 Jupyter 노트북에서 일반적으로 수행되지만 marimo에서는 수행할 수 없는 작업입니다.

```python {.marimo}
df = 0
```

```python {.marimo}
df = 1
```

```python {.marimo}
results = df.groupby(["my_column"]).sum()
```

**설명.** `results`는 `df`에 의존하지만 어떤 `df` 값을 사용해야 할까요? 반응성으로 인해 이 질문에 합리적인 방식으로 답할 수 없으므로 marimo는 변수 재할당을 허용하지 않습니다.

이 오류가 발생하면 다음 옵션을 사용할 수 있습니다.

1. 정의를 하나의 셀로 결합합니다.
2. 변수 앞에 밑줄(`_df`)을 붙여 셀에 로컬로 만듭니다.
3. 코드를 함수로 래핑하거나 변수에 더 설명적인 이름을 지정합니다.
<!---->
## 마크다운

marimo에는 Python 셀만 있지만 여전히 마크다운을 작성할 수 있습니다. `import marimo as mo`를 사용하고 `mo.md`를 사용하여 마크다운을 작성합니다.

```python {.marimo}
mo.md(
    f"""
    {slider}의 값은 {slider.value}입니다.
    """
)
```

**설명.** 마크다운을 Python으로 가져옴으로써 marimo를 사용하면 임의의 Python 요소로 매개변수화된 동적 마크다운을 구성할 수 있습니다. marimo는 자체 요소를 렌더링하는 방법을 알고 있으며 `mo.as_html`을 사용하여 플롯과 같은 다른 개체를 렌더링할 수 있습니다.

_팁: 빈 셀에서 `Cmd/Ctrl-Shift-M`을 통해 마크다운 보기를 전환합니다._
<!---->
## 노트북 파일

Jupyter는 노트북을 JSON 파일로 저장하고 출력을 직렬화합니다. 이는 플롯 및 기타 결과의 기록으로 유용하지만 노트북의 버전 관리 및 재사용을 어렵게 만듭니다.

### marimo 노트북은 Python 스크립트입니다.
marimo 노트북은 순수 Python 스크립트로 저장됩니다. 이를 통해 git으로 버전을 관리하고 명령줄로 실행하며 한 노트북의 논리를 다른 노트북에서 재사용할 수 있습니다.

### marimo 노트북은 출력을 저장하지 않습니다.
marimo는 파일에 출력을 저장하지 _않습니다_. 출력을 저장하려면 Python을 사용하여 디스크에 저장하거나 노트북 메뉴를 통해 HTML로 내보내야 합니다.

### marimo 노트북은 git으로 버전 관리가 가능합니다.

marimo는 코드의 작은 변경 사항이 작은 git 차이점을 생성하도록 설계되었습니다!
<!---->
## 맺음말

marimo는 오류가 발생하기 쉬운 스크래치패드 대신 재현 가능하고 대화형이며 공유 가능한 Python 프로그램으로 Python 노트북을 **재창조**한 것입니다.

우리는 우리가 사용하는 도구가 우리의 사고방식을 형성한다고 믿습니다. 더 나은 도구는 더 나은 정신을 만듭니다. marimo를 통해 Python 커뮤니티에 연구를 수행하고 전달하고, 코드를 실험하고 공유하며, 계산 과학을 배우고 가르칠 수 있는 더 나은 프로그래밍 환경을 제공하고자 합니다.

marimo 편집기와 라이브러리에는 여기에 설명되지 않은 많은 기능이 있습니다.
자세한 내용은 [문서](https://docs.marimo.io/)를 확인하세요!

_이 가이드는 [Jupyter 사용자를 위한 Pluto](https://featured.plutojl.org/basic/pluto%20for%20jupyter%20users)를 각색한 것입니다.
우리는 Pluto.jl을 ❤️합니다!_