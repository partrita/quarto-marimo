---
title: 소개
marimo-version: 0.13.2
lang: ko
header: |-
  # Copyright 2024 Marimo. All rights reserved.
filters:
- marimo-team/marimo
---

```python {.marimo}
import marimo as mo

mo.md("# marimo에 오신 것을 환영합니다! 🌊🍃")
```

```python {.marimo}
slider = mo.ui.slider(1, 22)
```

```python {.marimo}
mo.md(
    f"""
    marimo는 **반응형** Python 노트북입니다.

    즉, 기존 노트북과 달리 marimo 노트북은 수정하거나 이 슬라이더와 같은 UI 요소와 상호 작용할 때 **자동으로 실행**됩니다. {slider}.

    {"##" + "🍃" * slider.value}
    """
)
```

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: 자동 실행 비활성화": mo.md(
            rf"""
        marimo를 사용하면 자동 실행을 비활성화할 수 있습니다. 노트북 설정으로 이동하여

        "런타임 > 셀 변경 시"를 "지연"으로 설정합니다.

        런타임이 지연되면 셀을 실행한 후 marimo는 하위 항목을 자동으로 실행하는 대신 부실로 표시합니다. 지연 런타임은 셀 실행 시기를 제어하는 동시에 노트북 상태에 대한 보장을 제공합니다.
        """
        )
    }
)
```

```python {.marimo hide_code="true"}
mo.md(
    """
    팁: 이것은 튜토리얼 노트북입니다. 명령줄에 `marimo edit`를 입력하여 자신만의 노트북을 만들 수 있습니다.
    """
).callout()
```

## 1. 반응형 실행

marimo 노트북은 셀이라는 작은 Python 코드 블록으로 구성됩니다.

marimo는 셀을 읽고 셀 간의 종속성을 모델링합니다. 전역 변수를 정의하는 셀이 실행될 때마다 marimo는 해당 변수를 참조하는 모든 셀을 **자동으로 실행**합니다.

반응성은 프로그램 상태와 출력을 코드와 동기화하여 버그가 발생하기 전에 예방하는 동적 프로그래밍 환경을 만듭니다.

```python {.marimo hide_code="true"}
(
    mo.md(
        f"""
        **✨ 좋습니다!** `changed`의 값은 이제 {changed}입니다.

        변수 `changed`의 값을 업데이트하면 marimo는 이 셀이 전역 변수 `changed`를 참조하기 때문에 이 셀을 자동으로 실행하여 **반응**했습니다.

        반응성은 노트북 상태가 항상 일관되도록 보장하며, 이는 좋은 과학을 수행하는 데 중요합니다. 또한 marimo 노트북이 도구 및 앱으로 두 배로 활용될 수 있도록 하는 것입니다.
        """
    )
    if changed
    else mo.md(
        """
        **🌊 실제로 확인해 보세요.** 다음 셀에서 변수 `changed`의 값을 `True`로 변경한 다음 실행 버튼을 클릭합니다.
        """
    )
)
```

```python {.marimo}
changed = False
```

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: 실행 순서": (
            """
            페이지의 셀 순서는 셀이 실행되는 순서에 영향을 미치지 않습니다. marimo는 변수를 읽는 셀이 해당 변수를 정의하는 셀 다음에 실행되어야 한다는 것을 알고 있습니다. 이를 통해 가장 합리적인 방식으로 코드를 구성할 수 있습니다.
            """
        )
    }
)
```

**전역 이름은 고유해야 합니다.** 반응성을 사용하려면 marimo는 셀에 이름이 나타나는 방식에 제약 조건을 적용합니다. 즉, 두 셀이 동일한 변수를 정의할 수 없습니다.

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: 캡슐화": (
            """
            함수, 클래스 또는 Python 모듈에 논리를 캡슐화하여 노트북의 전역 변수 수를 최소화할 수 있습니다.
            """
        )
    }
)
```

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: 비공개 변수": (
            """
            밑줄로 시작하는 변수는 셀에 "비공개"이므로 여러 셀에서 정의할 수 있습니다.
            """
        )
    }
)
```

## 2. UI 요소

셀은 대화형 UI 요소를 출력할 수 있습니다. UI 요소와 상호 작용하면 **노트북 실행이 자동으로 트리거**됩니다. UI 요소와 상호 작용하면 해당 값이 Python으로 다시 전송되고 해당 요소를 참조하는 모든 셀이 다시 실행됩니다.

marimo는 `marimo.ui`에서 선택할 수 있는 UI 요소 라이브러리를 제공합니다.
<!---->
**🌊 일부 UI 요소.** 아래 요소와 상호 작용해 보세요.

```python {.marimo}
icon = mo.ui.dropdown(["🍃", "🌊", "✨"], value="🍃")
```

```python {.marimo}
repetitions = mo.ui.slider(1, 16, label=f"{icon.value}의 수: ")
```

```python {.marimo}
icon, repetitions
```

```python {.marimo}
mo.md("# " + icon.value * repetitions.value)
```

## 3. marimo는 그냥 Python입니다

marimo 셀은 Python(및 Python만)을 구문 분석하고 marimo 노트북은 순수 Python 파일로 저장됩니다. 출력은 포함되지 _않습니다_. 마법 같은 구문은 없습니다.

marimo에서 생성된 Python 파일은 다음과 같습니다.

- git으로 쉽게 버전을 관리하고 최소한의 차이점을 생성합니다.
- 인간과 기계 모두 읽을 수 있습니다.
- 원하는 도구를 사용하여 형식을 지정할 수 있습니다.
- UI 요소가 기본값을 사용하는 Python 스크립트로 사용할 수 있으며,
- 다른 모듈에서 가져올 수 있습니다(나중에 자세히 설명).
<!---->
## 4. 노트북을 앱으로 실행

marimo 노트북은 앱으로 두 배로 활용될 수 있습니다. 오른쪽 하단의 앱 창 아이콘을 클릭하여 "앱 보기"에서 이 노트북을 확인하세요.

명령줄에서 `marimo run`을 사용하여 노트북을 앱으로 제공합니다. 물론 앱을 만들지 않고도 노트북 작업을 향상시키기 위해 marimo를 사용할 수 있습니다.
<!---->
## 5. `marimo` 명령줄 도구

**노트북 생성 및 편집.** 터미널에서 다음을 사용합니다.

```
marimo edit
```

marimo 노트북 서버를 시작합니다. 여기에서 새 노트북을 만들거나 기존 노트북을 편집할 수 있습니다.


**앱으로 실행.** 다음을 사용합니다.

```
marimo run notebook.py
```

웹 서버를 시작하여 노트북을 읽기 전용 모드로 앱으로 제공하고 코드 셀은 숨깁니다.

**Jupyter 노트북 변환.** `marimo convert`를 사용하여 Jupyter 노트북을 marimo 노트북으로 변환합니다.

```
marimo convert your_notebook.ipynb > your_app.py
```

**튜토리얼.** marimo에는 튜토리얼이 포함되어 있습니다.

- `dataflow`: marimo의 자동 실행에 대한 자세한 내용
- `ui`: UI 요소 사용 방법
- `markdown`: 보간된 값과 LaTeX를 사용하여 마크다운을 작성하는 방법
- `plots`: marimo에서 플로팅이 작동하는 방식
- `sql`: SQL 사용 방법
- `layout`: marimo의 레이아웃 요소
- `fileformat`: marimo의 파일 형식이 작동하는 방식
- `markdown-format`: marimo에서 `.md` 파일 사용
- `for-jupyter-users`: Jupyter에서 온 경우

`marimo tutorial`로 튜토리얼을 시작합니다. 예를 들어 다음과 같습니다.

```
marimo tutorial dataflow
```

튜토리얼 외에도 [GitHub 리포지토리](https://www.github.com/marimo-team/marimo/tree/main/examples)에 예제가 있습니다.
<!---->
## 6. marimo 편집기

다음은 marimo 편집기를 시작하는 데 도움이 되는 몇 가지 팁입니다.

```python {.marimo}
mo.accordion(tips)
```

## 마지막으로 재미있는 사실
<!---->
"marimo"라는 이름은 특정 조건에서 함께 뭉쳐 "marimo moss ball"이라는 작은 구체를 형성하는 해조류의 한 종류를 참조합니다. 해조류 가닥으로만 만들어진 이 사랑받는 집합체는 부분의 합보다 큽니다.

```python {.marimo hide_code="true"}
tips = {
    "저장": (
        """
        **저장**

        - 화면 상단의 상자를 사용하거나 `Ctrl/Cmd+s`를 사용하여 앱의 _이름_을 지정합니다. 명령줄에서 `marimo edit app_name.py`와 같이 명명된 앱을 만들 수도 있습니다.

        - 오른쪽 하단의 저장 아이콘을 클릭하거나 `Ctrl/Cmd+s`를 입력하여 _저장_합니다. 기본적으로 marimo는 자동 저장하도록 구성되어 있습니다.
        """
    ),
    "실행": (
        """
        1. 셀 오른쪽 상단의 재생( ▷ ) 버튼을 클릭하거나 `Ctrl/Cmd+Enter`를 입력하여 _셀을 실행_합니다.

        2. 셀 오른쪽의 노란색 실행 버튼을 클릭하거나 `Ctrl/Cmd+Enter`를 입력하여 _오래된 셀을 실행_합니다. 셀은 코드가 수정되었지만 실행되지 않은 경우 오래된 것입니다.

        3. 화면 오른쪽 하단의 재생( ▷ ) 버튼을 클릭하거나 `Ctrl/Cmd+Shift+r`을 입력하여 _모든 오래된 셀을 실행_합니다.
        """
    ),
    "콘솔 출력": (
        """
        콘솔 출력(예: `print()` 문)은 셀 아래에 표시됩니다.
        """
    ),
    "셀 생성, 이동 및 삭제": (
        """
        1. 마우스를 가져가면 나타나는 셀 왼쪽의 더하기 버튼을 클릭하여 지정된 셀 위나 아래에 새 셀을 _만듭니다_.

        2. 마우스를 가져가면 나타나는 셀 오른쪽의 핸들을 드래그하여 셀을 위나 아래로 _이동_합니다.

        3. 휴지통 아이콘을 클릭하여 셀을 _삭제_합니다. 화면 오른쪽 하단의 실행 취소 버튼을 클릭하거나 `Ctrl/Cmd+Shift+z`를 사용하여 다시 가져옵니다.
        """
    ),
    "자동 실행 비활성화": (
        """
        노트북 설정(톱니바퀴 아이콘) 또는 바닥글 패널을 통해 자동 실행을 비활성화할 수 있습니다. 이는 비용이 많이 드는 노트북이나 데이터베이스 트랜잭션과 같은 부작용이 있는 노트북으로 작업할 때 유용합니다.
        """
    ),
    "셀 비활성화": (
        """
        셀 컨텍스트 메뉴를 통해 셀을 비활성화할 수 있습니다. marimo는 비활성화된 셀이나 해당 셀에 의존하는 셀을 실행하지 않습니다. 이렇게 하면 노트북을 편집할 때 비용이 많이 드는 계산이 우발적으로 실행되는 것을 방지하는 데 도움이 될 수 있습니다.
        """
    ),
    "코드 접기": (
        """
        왼쪽 줄 번호 열의 화살표 아이콘을 클릭하거나 키보드 단축키를 사용하여 셀의 코드를 축소하거나 접을 수 있습니다.

        명령 팔레트(`Ctrl/Cmd+k`) 또는 키보드 단축키를 사용하여 모든 셀을 빠르게 접거나 펼칩니다.
        """
    ),
    "코드 서식 지정": (
        """
        [ruff](https://github.com/astral-sh/ruff)가 설치되어 있으면 키보드 단축키 `Ctrl/Cmd+b`를 사용하여 셀의 서식을 지정할 수 있습니다.
        """
    ),
    "명령 팔레트": (
        """
        `Ctrl/Cmd+k`를 사용하여 명령 팔레트를 엽니다.
        """
    ),
    "키보드 단축키": (
        """
        노트북 메뉴(오른쪽 상단)를 열거나 `Ctrl/Cmd+Shift+h`를 입력하여 모든 키보드 단축키 목록을 봅니다.
        """
    ),
    "구성": (
        """
       화면 오른쪽 상단 근처의 톱니바퀴 아이콘을 클릭하여 편집기를 구성합니다.
       """
    ),
    "종료 및 시스템 종료": (
        """
       화면 오른쪽 상단의 원형 X를 클릭하고 프롬프트에 응답하여 Marimo를 종료하고 서버를 종료할 수 있습니다.

       :floppy_disk: _먼저 작업을 저장해야 합니다!_
       """
    ),
}
```