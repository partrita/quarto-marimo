---
title: 마크다운
marimo-version: 0.13.2
lang: ko
---

# 안녕하세요, 마크다운!

marimo의 "`md`" 함수를 사용하여 마크다운을 작성합니다. 이 함수는 마크다운을 marimo가 표시할 수 있는 HTML로 컴파일합니다.

예를 들어, 위 제목과 단락을 렌더링한 코드는 다음과 같습니다.

```python3
mo.md(
    '''
    # 안녕하세요, 마크다운!

    marimo의 "`md`" 함수를 사용하여 서식 있는 텍스트를 marimo 앱에 포함합니다. 이 함수는 마크다운을 marimo가 표시할 수 있는 HTML로 컴파일합니다.
    '''
)
```
<!---->
**팁: 마크다운 편집기와 Python 편집기 간 전환**

마크다운은 `mo.md`로 작성되지만 marimo는 이 상용구를 숨기는 마크다운 편집기를 제공합니다.

편집기 오른쪽 상단의 파란색 아이콘을 클릭하거나 `Ctrl/Cmd+Shift+M`을 입력하거나 "셀 작업 메뉴"를 사용하여 마크다운 편집기와 Python 편집기 간을 전환합니다. 셀 작업 메뉴를 통해 마크다운 편집기를 **숨길** 수도 있습니다.

**팁**: Python 값을 마크다운 문자열에 보간하려면 `mo.md(f"...")`를 직접 사용해야 합니다. 마크다운 보기에서는 f-문자열을 지원하지 않습니다.
<!---->
## LaTeX
마크다운에 LaTeX를 포함할 수 있습니다.

예를 들어,

```python3
mo.md(r'$f : \mathbf{R} \to \mathbf{R}$')
```

는 $f : \mathbf{R} \to \mathbf{R}$를 렌더링하고,

```python3
mo.md(
    r'''
    \[
    f: \mathbf{R} \to \mathbf{R}
    \]
    '''
)
```

는 디스플레이 수학을 렌더링합니다.

\[
f: \mathbf{R} \to \mathbf{R}.
\]

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: `r''` 문자열": mo.md(
            "LaTeX를 작성할 때 백슬래시를 이스케이프할 필요가 없도록 `r''` 문자열을 사용합니다."
        )
    }
)
```

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "참고: KaTeX": mo.md(
            """
            marimo는 실제로 웹용 수학 조판 라이브러리인 KaTeX를 사용하며 LaTeX의 하위 집합을 지원합니다. (미)지원 명령 목록은 https://katex.org/docs/support_table을 참조하세요.
            """
        )
    }
)
```

## Python 값 보간

`f-문자열`과 marimo의 `as_html` 함수를 사용하여 Python 값을 마크다운에 보간할 수 있습니다. 이를 통해 런타임에 변경되는 데이터에 따라 내용이 달라지는 마크다운을 만들 수 있습니다.

다음은 몇 가지 예입니다.

````python {.marimo}
def _sine_plot():
    _x = np.linspace(start=0, stop=2 * np.pi)
    plt.plot(_x, np.sin(_x))
    return plt.gca()

mo.md(
    f"""
    ### 플롯
    matplotlib 그림:

    ```python3
    _x = np.linspace(start=0, stop=2*np.pi)
    sine_plot = plt.plot(_x, np.sin(_x))
    mo.md(f"{{mo.as_html(sine_plot)}}")
    ```
    결과:

    {mo.as_html(_sine_plot())}
    """
)
````

````python {.marimo}
leaves = mo.ui.slider(1, 32, label="🍃: ")

mo.md(
    f"""
    ### UI 요소

    `marimo.ui` 개체:

    ```python3
    leaves = mo.ui.slider(1, 16, label="🍃: ")
    mo.md(f"{{leaves}}")
    ```

    결과:

    {leaves}
    """
)
````

```python {.marimo}
mo.md(f"나뭇잎: {'🍃' * leaves.value}")
```

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: UI 요소는 자체적으로 형식을 지정할 수 있습니다.": """
        marimo 개체는 자체적으로 형식을 지정하는 방법을 알고 있으므로 `as_html` 호출을 생략할 수 있습니다.
        """
    }
)
```

```python {.marimo}
import polars as pl

def make_dataframe():
    x = np.linspace(0, 2 * np.pi, 10)
    y = np.sin(x)
    return pl.DataFrame({"x": x, "sin(x)": y})

mo.md(
    f"""
    ### 기타 개체

    `mo.as_html`을 사용하여 개체를 HTML로 변환합니다. 이 함수는 다음을 포함하여 많은 Python 유형에 대해 서식 있는 HTML을 생성합니다.

    - 목록, 사전 및 튜플,
    - `pandas` 데이터프레임 및 시리즈,
    - `seaborn` 그림,
    - `plotly` 그림,
    - `altair` 그림.

    예를 들어, 다음은 Polars 데이터프레임입니다.

    {mo.as_html(make_dataframe())}
    """
)
```

```python {.marimo hide_code="true"}
mo.accordion(
    {
        "팁: 출력은 자동으로 HTML로 변환됩니다.": """
        `mo.as_html`은 개체를 마크다운에 보간할 때만 필요합니다. 셀의 마지막 표현식(출력)은 자동으로 HTML로 변환됩니다.
        """
    }
)
```

## 종합

다음은 지금까지 배운 모든 것을 종합한 더 흥미로운 예입니다. Python 개체의 값에 따라 달라지는 LaTeX를 사용하여 마크다운을 렌더링합니다.

```python {.marimo}
amplitude = mo.ui.slider(1, 2, step=0.1, label="진폭: ")
period = mo.ui.slider(
    math.pi / 4,
    4 * math.pi,
    value=2 * math.pi,
    step=math.pi / 8,
    label="주기: ",
)
```

```python {.marimo}
@mo.cache
def plotsin(amplitude, period):
    x = np.linspace(0, 2 * np.pi, 256)
    plt.plot(x, amplitude * np.sin(2 * np.pi / period * x))
    plt.ylim(-2.2, 2.2)
    return plt.gca()
```

```python {.marimo}
mo.md(
    f"""
    **사인 곡선.**

    - {amplitude}
    - {period}
    """
)
```

```python {.marimo}
mo.md(
    rf"""
    다음 그래프를 보고 있습니다.

    \[
    f(x) = {amplitude.value}\sin((2\pi/{period.value:0.2f})x),
    \]

    여기서 $x$의 범위는 $0$에서 $2\pi$입니다.
    {mo.as_html(plotsin(amplitude.value, period.value))}
    """
)
```

```python {.marimo hide_code="true"}
import matplotlib.pyplot as plt
import numpy as np
```

```python {.marimo hide_code="true"}
import math

import marimo as mo
```