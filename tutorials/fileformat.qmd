---
title: 파일 형식
marimo-version: 0.13.2
lang: ko
header: |-
  # Copyright 2025 Marimo. All rights reserved
filters:
- marimo-team/marimo
---

```python {.marimo name="setup"}
import dataclasses
import random
```

```python {.marimo}
import marimo as mo
```

# 파일 형식

marimo 앱은 순수 Python 파일로 저장됩니다.

이러한 파일은 다음과 같습니다.

- 🤖 인간과 기계 모두 읽을 수 있습니다.
- ✏️ 원하는 도구를 사용하여 형식을 지정할 수 있습니다.
- ➕ git으로 쉽게 버전을 관리하고 작은 차이점을 생성합니다.
- 🐍 UI 요소가 기본값을 사용하는 Python 스크립트로 사용할 수 있습니다.
- 🧩 노트북에서 가져올 수 있는 함수와 클래스를 노출하는 모듈식입니다.
<!---->
## 예제

다음 네 개의 셀이 있는 marimo 노트북을 고려해 보세요.

첫 번째 셀:
```python3
print(text.value)
```

두 번째 셀:
```python3
def say_hello(name="World"):
    return f"Hello, {name}!"
```

세 번째 셀:
```python3
text = mo.ui.text(value=say_hello())
text
```

네 번째 셀:
```python3
import marimo as mo
```
<!---->
위의 예에서 marimo는 다음 파일 내용을 생성합니다.

```python3
import marimo

__generated_with = "0.0.0"
app = marimo.App()

@app.cell
def _(text):
    print(text.value)
    return

@app.function
def say_hello(name="World"):
    return f"Hello, {name}!"

@app.cell
def _(mo):
    text = mo.ui.text(value="Hello, World!")
    text
    return (text,)

@app.cell
def _():
    import marimo as mo
    return mo,

if __name__ == "__main__":
    app.run()
```

보시다시피 이것은 _순수 Python_입니다. 이것이 marimo에서 생성된 파일이 **git 친화적**인 이유 중 하나입니다. marimo 편집기를 사용하여 작은 변경 사항을 적용하면 marimo에서 생성하는 파일에 작은 변경 사항이 적용됩니다.

또한 순수 함수 `say_hello` 하나를 정의하는 셀은 노트북 파일의 "최상위 수준"에 저장되어 다른 Python 파일이나 노트북으로 가져올 수 있습니다.
<!---->
## 속성

marimo의 파일 형식은 읽기 쉽고 작업하기 쉽도록 설계되었으며 marimo 라이브러리의 요구 사항도 충족합니다. 즐겨 사용하는 텍스트 편집기를 사용하여 생성된 파일의 셀을 직접 편집하고 즐겨 사용하는 코드 포맷터를 사용하여 파일 형식을 지정할 수도 있습니다.

marimo 파일 형식의 몇 가지 속성을 아래에서 설명합니다.

````python {.marimo hide_code="true"}
mo.accordion(
    {
        "셀은 함수입니다": """
    `dataflow` 자습서에서 셀은 참조(사용하지만 정의하지 않는 전역 변수)를 정의(정의하는 전역 변수)에 매핑하는 함수와 같다는 것을 확인했습니다. 생성된 코드는 이 비유를 명시적으로 보여줍니다.

    생성된 코드에는 각 셀에 대한 함수가 있습니다. 함수의 인수는 셀의 참조이고 반환된 변수는 다른 셀에서 참조하는 정의입니다.

    예를 들어 다음 코드는

    ```python3
    @app.cell
    def _(mo):
        text = mo.ui.text(value="Hello, World!")
        text
        return text,
    ```

    셀이 `mo`라는 변수를 입력으로 사용하고 `text`라는 전역 변수(다른 셀에서 읽음)를 만든다는 것을 나타냅니다.

    반대로 다음 코드는

    ```python3
    @app.cell
    def _():
        import marimo as mo
        return mo,
    ```

    셀이 다른 셀에 의존하지 않지만(인수 목록이 비어 있음) 이전 셀에 입력으로 필요한 `mo` 변수를 만든다는 것을 나타냅니다.
    """,
        "셀은 프레젠테이션 순서로 저장됩니다": """
    셀은 marimo 편집기에서 정렬된 순서대로 저장됩니다. 따라서 즐겨 사용하는 텍스트 편집기를 사용하여 셀을 다시 정렬하려면 파일에 정의된 순서를 다시 정렬하기만 하면 됩니다.
    """,
        "텍스트 서식이 유지됩니다": """
    marimo는 marimo 편집기에서 소스 코드의 서식이 지정된 방식 그대로 생성된 코드에 저장되도록 보장합니다. 예를 들어 공백, 줄 바꿈 등은 모두 정확하게 유지됩니다. 즉, 텍스트 편집기에서 수동으로 또는 Black과 같은 자동 포맷터를 사용하여 서식을 수정하고 변경 사항이 유지될 것이라고 확신할 수 있습니다.
    """,
        "셀 함수에 이름을 지정할 수 있습니다": """
    원하는 경우 셀 함수의 기본 이름을 의미 있는 이름으로 바꿀 수 있습니다.

    예를 들어 다음을 변경합니다.

    ```python3
    @app.cell
    def _(text):
        print(text.value)
        return
    ```

    다음으로:

    ```python3
    @app.cell
    def echo(text):
        print(text.value)
        return
    ```

    이렇게 하면 생성된 코드를 더 읽기 쉽게 만들 수 있습니다.
    """,
        "마법 토큰 없음": """
    marimo에서 생성된 코드는 순수 Python이며 마법 구문이 없습니다.
    """,
        "셀 서명이 자동으로 유지됩니다": """
    셀을 편집할 때 셀의 모든 참조를 인수 목록에 포함하거나 모든 정의를 반환 값에 포함하는 것을 잊어버린 경우 marimo 편집기에서 다음에 열려고 할 때 marimo가 수정합니다. 따라서 셀을 편집할 때 셀 서명을 망칠까 봐 걱정하지 마십시오.
    """,
        "`app` 개체": """
    생성된 코드 상단에 `app`이라는 변수가 만들어집니다. 이 개체는 `cell` 데코레이터를 사용하여 셀을 데이터 흐름 그래프로 수집합니다.
    """,
        "스크립트로 실행 가능": """
    Python을 사용하여 명령줄에서 marimo 앱을 스크립트로 실행할 수 있습니다. 이렇게 하면 `marimo edit`으로 앱을 열 때와 마찬가지로 토폴로지 정렬 순서로 셀이 실행됩니다.

    예를 들어 예제를 스크립트로 실행하면 콘솔에 `Hello World!`가 인쇄됩니다.
    """,
        """모듈로 사용 가능""": """
    노트북의 최상위 함수 및 클래스를 다른 Python 파일로 가져옵니다.
    """,
    }
)
````

## 노트북에서 함수 및 클래스 가져오기

노트북에 정의된 함수와 클래스를 다른 Python 모듈로 가져오려면 marimo 파일 형식의 세부 정보가 중요합니다. 그렇게 할 의도가 없다면 이 섹션을 건너뛰어도 됩니다.
<!---->
### 함수 및 클래스에서 사용하는 가져오기 선언

marimo는 함수와 클래스를 파일의 최상위 수준으로 직렬화할 수 있으므로 일반 Python 구문을 사용하여 가져올 수 있습니다.

```python
from my_notebook import my_function
```

특히 셀이 단일 함수 또는 클래스만 정의하고 해당 함수 또는 클래스가 특수 **설정 셀**에 정의된 변수에 대한 참조를 제외하고 순수한 경우 최상위 수준으로 직렬화됩니다.

**설정 셀.** 노트북에는 선택적으로 모듈을 가져오는 설정 셀이 포함될 수 있으며 파일에 다음과 같이 작성됩니다.

<!-- 이 설정 셀은 플레이그라운드 예제에 하드코딩되어 있습니다. -->
```python
with app.setup:
    import marimo as mo
    import dataclasses
```

설정 셀에서 가져온 모듈은 "최상위 수준" 함수 또는 클래스에서 사용할 수 있습니다. 편집기의 일반 메뉴에서 다음 위치에 설정 셀을 추가할 수 있습니다. ::lucide:diamond-plus:: 설정 셀 추가.
<!---->
### 함수 및 클래스

노트북 파일은 설정 셀(또는 다른 유사한 함수 또는 클래스)에 정의된 변수에만 의존하는 함수와 클래스를 노출합니다. 예를 들어 다음 셀은 다음과 같습니다.

```python {.marimo name="*roll_die"}
def roll_die():
    """
    재사용 가능한 함수입니다.

    셀 오른쪽 하단의 표시기를 확인하세요.
    """
    return random.randint(1, 7)
```

... 노트북 파일에 다음과 같이 저장됩니다.

```python
@app.function
def roll_die():
    '''
    재사용 가능한 함수입니다.

    셀 오른쪽 하단의 표시기를 확인하세요.
    '''
    return random.randint(1, 7)
```


다음과 같이 가져올 수 있도록 만듭니다.

```python
from my_notebook import roll_die
```
<!---->
독립 실행형 클래스도 노출됩니다.

```python {.marimo name="*SimulationExample"}
@dataclasses.dataclass
class SimulationExample:
    n_rolls: int

    def simulate(self) -> list[int]:
        return [roll_die() for _ in range(self.n_rolls)]
```

이 클래스는 파일에 다음과 같이 저장됩니다.

```python
@app.class_definition
@dataclasses.dataclass
class SimulationExample:
    n_rolls: int

    def simulate(self) -> list[int]:
        return [roll_die() for _ in range(self.n_rolls)]
```
<!---->
/// attention | 주의
///

모든 독립 실행형 함수가 모듈에 노출되는 것은 아닙니다. 함수가 다른 셀에 정의된 변수에 의존하는 경우 최상위 수준으로 노출되지 않습니다.


예를 들어 이 함수는 노출되지 않습니다.

```python {.marimo}
variable = 123
```

```python {.marimo name="wrapped_function_example"}
def not_a_top_level_function():
    """
    이 함수는 다른 셀에 선언된 변수에 의존합니다.

    결과적으로 이 함수는 파일에 노출되지 않으며 오른쪽 하단 모서리의 도구 설명에 이 내용이 표시됩니다.
    """
    return variable
```

## 자주 묻는 질문

### 다른 편집기에서 노트북을 편집하고 싶은데 무엇을 알아야 하나요?

[자신만의 편집기 사용](https://docs.marimo.io/guides/editor_features/watching/)에 대한 문서를 참조하세요.

### marimo 노트북에서 함수를 가져오고 싶은데 무엇을 알아야 하나요?

[재사용 가능한 함수 및 클래스](https://links.marimo.app/reusable-functions)에 대한 문서를 참조하세요.

### marimo 노트북에서 pytest를 실행하고 싶은데 무엇을 알아야 하나요?

[테스트](https://docs.marimo.io/guides/testing/)에 대한 문서를 참조하세요.
<!---->
## 이 노트북의 소스 코드

이 노트북의 소스 코드는 다음과 같습니다.

```python {.marimo}
with open(__file__, "r", encoding="utf-8") as f:
    contents = f.read()
```

```python {.marimo}
mo.ui.code_editor(contents)
```